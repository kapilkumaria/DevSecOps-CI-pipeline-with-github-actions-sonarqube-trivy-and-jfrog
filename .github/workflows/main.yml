
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        repository: 'kapilkumaria/DevSecOps-CI-pipeline-with-github-actions-sonarqube-trivy-and-jfrog'
        ref: 'master'
  
    # Step 2: Set up Java and Maven
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    # Step 3: Download and Install Maven 3.9.2
    - name: Install Maven 3.9.2
      run: |
        # Remove existing symbolic link for mvn if it exists
        if [ -L /usr/bin/mvn ]; then sudo rm /usr/bin/mvn; fi
        curl -o /tmp/apache-maven-3.9.2-bin.tar.gz https://archive.apache.org/dist/maven/maven-3/3.9.2/binaries/apache-maven-3.9.2-bin.tar.gz
        sudo tar xf /tmp/apache-maven-3.9.2-bin.tar.gz -C /opt/
        sudo ln -s /opt/apache-maven-3.9.2/bin/mvn /usr/bin/mvn
        mvn --version  # Ensure the correct version of Maven is installed

    # Step 3: Build the project using Maven (pre-installed)
    - name: Build the package
      run: mvn -B -DskipTests clean package

    # Step 4: Run tests
    - name: Run tests
      run: mvn test
    - name: Archive test reports
      uses: actions/upload-artifact@v3
      with:
        name: surefire-reports
        path: target/surefire-reports/*.xml

    # Step 5: Archive test reports (JUnit test reports)
    - name: Archive test reports
      uses: actions/upload-artifact@v3
      with:
         name: surefire-reports
         path: target/surefire-reports/*.xml

    # Step 6: Archive the built JAR file
    - name: Archive JAR file
      uses: actions/upload-artifact@v3
      with:
         name: built-jar
         path: target/*.jar

    # Step 8: SonarQube Scan
    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONARQUBE_AUTH_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=your-project-key \
          -Dsonar.host.url=${{ secrets.SONARQUBE_URL }} \
          -Dsonar.login=${{ secrets.SONARQUBE_AUTH_TOKEN }}

    # Step 8: Install Node.js (Required for Mermaid CLI)
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
       node-version: '18'

    # # Step 9: Install Mermaid CLI globally
    # - name: Install Mermaid CLI
    #   run: npm install -g @mermaid-js/mermaid-cli

    # # Step 10: Create Mermaid Diagram for Pipeline
    # - name: Generate Pipeline Diagram
    #   run: |
    #    echo "graph TD; \
    #    Checkout_Code-->Install_Maven; \
    #    Install_Maven-->Build; \
    #    Build-->Run_Tests; \
    #    Run_Tests-->Archive_Test_Reports; \
    #    Archive_Test_Reports-->SonarQube_Scan;" > pipeline-diagram.mmd

    # # Step 11: Verify Mermaid CLI is installed correctly
    # - name: Verify Mermaid CLI
    #   run: mmdc --version

    # # Step 12: Generate PNG from Mermaid Diagram
    # - name: Generate Pipeline Diagram PNG
    #   run: mmdc -i pipeline-diagram.mmd -o pipeline-diagram.png

    # # Step 13: Upload Pipeline Diagram PNG
    # - name: Upload Pipeline Diagram
    #   uses: actions/upload-artifact@v3
    #   with:
    #    name: pipeline-diagram
    #    path: pipeline-diagram.png
