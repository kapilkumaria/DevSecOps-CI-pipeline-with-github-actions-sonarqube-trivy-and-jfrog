
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        repository: 'kapilkumaria/DevSecOps-CI-pipeline-with-github-actions-sonarqube-trivy-and-jfrog'
        ref: 'master'
  
    # Step 2: Set up Java and Maven
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    # Step 3: Download and Install Maven 3.9.2
    - name: Install Maven 3.9.2
      run: |
        # Remove existing symbolic link for mvn if it exists
        if [ -L /usr/bin/mvn ]; then sudo rm /usr/bin/mvn; fi
        curl -o /tmp/apache-maven-3.9.2-bin.tar.gz https://archive.apache.org/dist/maven/maven-3/3.9.2/binaries/apache-maven-3.9.2-bin.tar.gz
        sudo tar xf /tmp/apache-maven-3.9.2-bin.tar.gz -C /opt/
        sudo ln -s /opt/apache-maven-3.9.2/bin/mvn /usr/bin/mvn
        mvn --version  # Ensure the correct version of Maven is installed

    # Step 3: Build the project using Maven (pre-installed)
    - name: Build the package
      run: mvn -B -DskipTests clean package

     # Step 5: Check for generated JAR file
    - name: Check for generated JAR
      run: |
       if [ -f target/*.jar ]; then
         echo "JAR file generated successfully!"
       else
         echo "JAR file not found. Build may have failed."
         exit 1
       fi

       ls target


    # Step 4: Run tests
    - name: Run tests
      run: mvn test
    - name: Archive test reports
      uses: actions/upload-artifact@v3
      with:
        name: surefire-reports
        path: target/surefire-reports/*.xml

    # Step 5: Archive test reports (JUnit test reports)
    - name: Archive test reports
      uses: actions/upload-artifact@v3
      with:
         name: surefire-reports
         path: target/surefire-reports/*.xml

    # # Step 6: Archive the built JAR file
    # - name: Archive JAR file
    #   uses: actions/upload-artifact@v3
    #   with:
    #      name: built-name
    #      path: target/*.jar

    # # Step 3: Unzip the artifact to get the JAR
    # - name: Unzip the artifact
    #   run: unzip built-name -d extracted

    # Step 3: List files in the current directory to debug (optional)
    # - name: List files after download
    #   run: ls -alh

    # # Step 4: Unzip the artifact to get the JAR
    # - name: Unzip the artifact
    #   run: |
    #     unzip built-name.zip -d extracted || echo "Unzip failed; file not found"
    
    # Step 5: List extracted files for verification (optional)
    # - name: List extracted files
    #   run: ls -R extracted/

    # Step 8: SonarQube Scan
    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONARQUBE_AUTH_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=your-project-key \
          -Dsonar.host.url=${{ secrets.SONARQUBE_URL }} \
          -Dsonar.login=${{ secrets.SONARQUBE_AUTH_TOKEN }}

    # Step 8: Install Node.js (Required for Mermaid CLI)
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
       node-version: '18'

    # Step 9: Install JFrog CLI
    - name: Install JFrog CLI
      run: |
        curl -fL https://getcli.jfrog.io | sh
        sudo mv jfrog /usr/local/bin/jfrog
        jfrog --version  # Verify JFrog CLI installations

    # Step 10: Configure JFrog CLI
    - name: Configure JFrog CLI
      env:
        JFROG_URL: ${{ secrets.JFROG_URL }}   # Store the JFrog URL in GitHub secrets
        JFROG_USER: ${{ secrets.JFROG_USER }} # Store the JFrog username in GitHub secrets
        JFROG_API_KEY: ${{ secrets.JFROG_API_TOKEN }} # Store the JFrog API key in GitHub secrets

      run: |
         
           # Remove the old configuration if it exists, ignore errors if it doesn't.
             jfrog config rm artifactory-server-kk --quiet || true
         
           # Add new configuration for the Artifactory server
             jfrog config add artifactory-server-kk --artifactory-url=${ARTIFACTORY_URL} --user=${ARTIFACTORY_USER} --password=${JFROG_API_KEY} --interactive=false
        
    # Upload Maven artifacts to Artifactory
    - name: Upload Maven artifacts
      run: |
              
              jfrog rt u "target/*.jar" "${{ secrets.ARTIFACTORY_REPO }}/$(date +%Y-%m-%d)/" --build-name=my-build --build-number=12 --url=${{ secrets.JFROG_URL }} 
              # jfrog rt u "target/*.jar" "${{ secrets.JFROG_URL }}/${{ secrets.ARTIFACTORY_REPO }}/$(date +%Y-%m-%d)/" --build-name=my-build --build-number=12 --url=${{ secrets.JFROG_URL }} 
              

    # Optional: Cleanup JFrog configuration
    - name: Cleanup JFrog config
      run: |
        ./jfrog rt config delete